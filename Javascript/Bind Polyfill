Function.prototype.newBind = function (context) {
  const currentFn = this;
  const currentArgs = Array.prototype.slice.call(arguments, 1);

  return function () {
    const newArgs = Array.prototype.slice.call(arguments);
    return currentFn.apply(context, currentArgs.concat(newArgs));
  };
};

this.x = 81;
let module1 = {
  x: 9,
  getX: function () {
    return this.x;
  },
  getXY: function (y) {
    return [this.x, y];
  },
  getXYZ: function (y, z) {
    return [this.x, y, z];
  },
};

const newGetX = module1.getX;
console.log("newGetX without bind", newGetX());

const boundGetX = newGetX.newBind(module1);
console.log("boundGetX", boundGetX());

const newGetXY = module1.getXY;
const boundGetXY = newGetXY.newBind(module1, "Y");
console.log("boundGetXY", boundGetXY());

const newGetXYZ = module1.getXYZ;
const boundGetXYZ = newGetXYZ.newBind(module1, "y");
console.log("boundGetXYZ", boundGetXYZ("z"));
